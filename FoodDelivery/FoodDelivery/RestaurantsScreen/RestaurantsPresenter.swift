//
//  RestaurantsPresenter.swift
//  FoodDelivery
//
//  Created Galean Pallerman on 16.08.2019.
//  Copyright Â© 2019 GPco. All rights reserved.
//
//  Template generated by Galean Pallerman
//

import Foundation
import UIKit

class RestaurantsPresenter: NSObject {
    fileprivate unowned var viewController: RestaurantsPresenterToViewProtocol
    fileprivate lazy var interactor: RestaurantsPresenterToInteractorProtocol = {
        return RestaurantsInteractor(with: self)
    }()
    
    //MARK: Initialization
    init(with viewController: RestaurantsPresenterToViewProtocol) {
        self.viewController = viewController
        
        super.init()
    }
}

//MARK:- RestaurantsInteractorToPresenterProtocol
extension RestaurantsPresenter: RestaurantsInteractorToPresenterProtocol {
    func updatingCurrentCity(_ isUpdating: Bool) {
        DispatchQueue.main.async {
            self.viewController.animateCitiesLoading(isUpdating)
        }
    }
    
    func restaurantsFetched() {
        DispatchQueue.main.async {
            self.viewController.reloadRestaurantsTableView()
            self.viewController.animateRestaurantsLoading(false)
        }
    }
    
    func restaurantsFetched(with error: NSError) {
        
    }
    
    func callCityPicker() {
        DispatchQueue.main.async {
            self.viewController.presentCityPicker()
        }
    }
}

//MARK:- RestaurantsViewToPresenterProtocol
extension RestaurantsPresenter: RestaurantsViewToPresenterProtocol {
    func viewDidLoad() {
        interactor.fetchCurrentCity()
        viewController.animateRestaurantsLoading(true)
    }
    
    func currentCityName() -> String {
        return interactor.currentCityName
    }
    
    func restaurantsTableViewNumberOfSections() -> Int {
        return interactor.restaurantsSectionsNumber()
    }
    
    func restaurantsTableViewSectionTitle(for section: Int) -> String {
        let sections = interactor.restaurantsSections()
        
        guard section < sections.count else {
            //TODO: TODO: Internal error
            assert(false)
            return ""
        }
        
        return sections[section]
    }
    
    func restaurantsTableViewNumberOfRows(for section: Int) -> Int {
        return interactor.restaurantsCount(for: section)
    }
    
    func restaurantsTableViewCellData(for indexPath: IndexPath) -> RestaurantsTableViewCellData {
        let rest = interactor.restaurantData(for: indexPath)
        let restCellData = RestaurantsTableViewCellData(with: rest)
        return restCellData
    }
    
    func cityButtonTapped() {
        interactor.requestCities()
    }
    
    func cityPickerFinished() {
        DispatchQueue.main.async {
            self.viewController.dissmissCityPicker()
            self.viewController.animateRestaurantsLoading(true)
            self.interactor.fetchCurrentCity()
        }
    }
}
