//
//  RestaurantsViewController.swift
//  FoodDelivery
//
//  Created Galean Pallerman on 16.08.2019.
//  Copyright Â© 2019 GPco. All rights reserved.
//
//  Template generated by Galean Pallerman
//

import Foundation
import UIKit

class RestaurantsViewController: UIViewController {
    fileprivate lazy var presenter: RestaurantsViewToPresenterProtocol = {
        return RestaurantsPresenter(with: self)
    }()
    
    @IBOutlet weak var cityButton: UIButton!
    @IBOutlet weak var cityButtonActivity: UIActivityIndicatorView!
    @IBOutlet weak var restaurantsActivity: UIActivityIndicatorView!
    @IBOutlet weak var restaurantsTableView: UITableView!
    
    //MARK: Initialization
    override func viewDidLoad() {
        super.viewDidLoad()
        
        presenter.viewDidLoad()
    }
    
    //MARK:- Buttons Actions
    @IBAction func cityButtonTapped() {
        presenter.cityButtonTapped()
    }
    
    //MARK:- Internal
    fileprivate func updateCityButton(title: String) {
        cityButton.setTitle(title, for: .normal)
    }
    
    fileprivate func configureCitiesButton(onLoading loading: Bool) {
        let cityName = loading ? "" : presenter.currentCityName()
        updateCityButton(title: cityName)
        
        loading ? cityButtonActivity.startAnimating() : cityButtonActivity.stopAnimating()
        cityButton.isUserInteractionEnabled = !loading
    }
    
    //MARK:- Segue
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "PresentCityPicker" {
            let vc = segue.destination
            
            if let cityPickerVC = vc as? RestaurantsToCityPickerProtocol {
                cityPickerVC.delegate = self
                
                let currentCity = presenter.currentCityName()
                cityPickerVC.setCurrentCity(currentCity)
            }
        }
    }
}

//MARK:- RestaurantsPresenterToViewProtocol
extension RestaurantsViewController: RestaurantsPresenterToViewProtocol {
    func animateCitiesLoading(_ loading: Bool) {
        configureCitiesButton(onLoading: loading)
    }
    
    func animateRestaurantsLoading(_ loading: Bool) {
        loading ? restaurantsActivity.startAnimating() : restaurantsActivity.stopAnimating()
    }
    
    func reloadRestaurantsTableView() {
        restaurantsTableView.reloadData()
    }
    
    func pushController(with identifier: String) {
        
    }
    
    func presentCityPicker() {
        performSegue(withIdentifier: "PresentCityPicker", sender: self)
    }
    
    func dissmissCityPicker() {
        dismiss(animated: true, completion: nil)
    }
}

//MARK:- UITableViewDelegate
extension RestaurantsViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
    }
}

//MARK:- UITableViewDataSource
extension RestaurantsViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let cell = tableView.dequeueReusableCell(withIdentifier: RestaurantsTableViewHeaderCell.cellIdentifier)
        let title = presenter.restaurantsTableViewSectionTitle(for: section)
        
        guard let headerCell = cell as? RestaurantsTableViewHeaderCell else {
            assert(false)
            print("""
                     RestaurantsViewController.viewForHeaderInSection
                     Dequeued unpredicted cell
                     """)
            return UITableViewCell()
        }
        
        headerCell.configure(with: title)
        return headerCell
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return presenter.restaurantsTableViewNumberOfSections()
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter.restaurantsTableViewNumberOfRows(for: section)
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let id = RestaurantsTableViewCell.cellIdentifier
        let cell = tableView.dequeueReusableCell(withIdentifier: id, for: indexPath)
        
        guard let restaurantCell = cell as? RestaurantsTableViewCell else {
            assert(false)
            print("""
                     RestaurantsViewController.cellForRowAt
                     Dequeued unpredicted cell
                     """)
            return UITableViewCell()
        }
        
        let cellData = presenter.restaurantsTableViewCellData(for: indexPath)
        restaurantCell.configure(with: cellData)
        
        return restaurantCell
    }
}

extension RestaurantsViewController: CityPickerToRestaurantsProtocol {
    func pickedCity() {
        presenter.cityPickerFinished()
    }
}
